function drive() {
  //📁 folder name
  const folderNames = ["SAURAV","SHUBHAM"];

  const ss = SpreadsheetApp.getActive();

  const formatSize = (bytes) => {
    if (!bytes) return "0 B";
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return (bytes / 1024 ** i).toFixed(2) + " " + ["B", "KB", "MB", "GB", "TB"][i];
  };

  const formatDate = (date) => {
    return Utilities.formatDate(date, Session.getScriptTimeZone(), "dd-MM-yyyy");
  };

  const recurse = (folder, path, data) => {
    const fullPath = path + "" + folder.getName();

    const files = folder.getFiles();
    while (files.hasNext()) {
      const file = files.next();
      const name = file.getName();
      const id = file.getId();
      const size = formatSize(file.getSize());
      const date = formatDate(file.getDateCreated());
      
      data.push([name, id, size, date, fullPath]);
    }

    const subfolders = folder.getFolders();
    while (subfolders.hasNext()) {
      recurse(subfolders.next(), fullPath, data);
    }
  };

  folderNames.forEach(app => {
    const sheet = ss.getSheetByName(app) || ss.insertSheet(app);
    sheet.clear();
    sheet.appendRow([ "File Name", "File ID", "Size", "File_Created", "Full Path"]);

    const homeFolderIterator = DriveApp.getFoldersByName(app);
    if (!homeFolderIterator.hasNext()) {
      sheet.getRange(2, 1).setValue(`No folder named '${app}' found.`);
      return;
    }

    const homeFolder = homeFolderIterator.next();
    const data = [];
    recurse(homeFolder, "", data);

    if (data.length) {
      data.sort((a, b) => {
        const dateA = new Date(a[3].split("-").reverse().join("-"));
        const dateB = new Date(b[3].split("-").reverse().join("-"));
        return dateA - dateB;
      });

      sheet.getRange(2, 1, data.length, 6).setValues(data);
    }
  });
}
